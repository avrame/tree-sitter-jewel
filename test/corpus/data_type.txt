===========================
Data type like a basic enum
===========================

data ColorName = Red | Green | Blue

-----------

(source_file
  (data_type
    (data_type_name)
    (data_type_constructor_name)
    (data_type_constructor_name)
    (data_type_constructor_name)))

================================
Data type with Generic Parameter
================================

data Maybe<t> = Nil | Some t

--------------------------------

(source_file
  (data_type
    (data_type_name)
    (generic_parameters
      (generic_type))
    (data_type_constructor_name)
    (data_type_constructor_name)
    (generic_type)))

================
Data type - Tree
================

data Tree<t> = Nil | Leaf t | Node { left: Tree, value: t, right: Tree }

--------------------------------

(source_file
  (data_type
    (data_type_name)
    (generic_parameters
      (generic_type))
    (data_type_constructor_name)
    (data_type_constructor_name)
    (generic_type)
    (data_type_constructor_name)
    (struct_type_body
      (field_name)
      (field_type
        (user_defined_type_name))
      (field_name)
      (field_type
        (generic_type))
      (field_name)
      (field_type
        (user_defined_type_name)))))

====================================
Complex Data type with various types
====================================

data CSSColor =
  | ColorName CSSColorName
  | RGB { r: Int8, g: Int8, b: Int8 }
  | HSL { hue: Hue, sat: Float, light: Float, alpha: Alpha }

constraint CSSColorName: String = "red" | "green" | "blue" | "rebeccapurple" | "aliceblue"
data Hue = HueDeg Angle | HueRadian Radian | HueTurn Turn
alias Angle = Int16<range=0..360>
alias Radian = Float
alias Turn = Float
alias Alpha = Float<range=0..1>

